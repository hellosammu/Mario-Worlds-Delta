<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario Worlds Delta Controller Object (This is required to run the game, do not remove it.)

/*Change this option to 'true' for save files to load:
-Powerup State
-Current Mount &amp; Mount Colour
-Lives
-Coins
-Score
-Reserve item
-Goal tape bonus*/
global.load_state = false;

//Change this option to 'true' to save after every level!
//(Otherwise, saves after castles &amp; Switch Palaces)
global.alt_save = false;

//Initialize Global Variables
init_globals();

//Initialize Shader Variables
init_pixel();
init_shockwave();

//Current file
global.file = 0;

//Remember last room
last_room = noone;

//Coins collected in room
coins = 0;

//Remember HUD Type
hud_type = 0;

//How the screen is fading
//0: From black
//1: To black
mode = 0;

//How much the screen is faded
fade = 0;

//Screenshot of the game, if it exists
back = -1;

//TV Mode?
tvmode = 0;

//Pixelate screen
pixelate = 0;

//Shake variable
shake = 0;
shake_anim = 0;
alarm[9] = 1;
yport = 0;

//Game message
message = "";

//Display FPS
showfps = false;

//Gives extra lives
givelives = 0;
alarm[7] = 1;

//Frames
frame = 0;

//Restart game
restart = false;

//Game width / heigh
global.gw = 256;
global.gh = 224;

//Freeze the screen?
global.screenfreeze = true;

//In-Game Font
global.font = font_add_sprite(spr_font, ord('!'), 0, 0);

//In-HUD Numbers
global.fontnumb = font_add_sprite(spr_font_numb, ord('0'), 0, 0);

//In-HUD Gold Numbers
global.fontnumbgold = font_add_sprite(spr_font_numb_gold, ord('0'), 0, 0);

//In-HUD Large Numbers
global.fontnumblarge = font_add_sprite(spr_font_numb_large, ord('0'), 0, 0);

//In-Dialogue Font
global.fontdialog = font_add_sprite(spr_font_dialogue, ord('!'), 1, 0);

//In-Message Font
global.fontmsg = font_add_sprite(spr_font_message, ord('!'), 0, 0);

//SMA4 In-Message Font
global.fontmsg_alt = font_add_sprite(spr_font_message_alt, ord('!'), 0, 0);

//Disable application surface automatic drawing
application_surface_draw_enable(0)

//Set the epsilon value for floating point numbers
math_set_epsilon(0.000001);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop pixelation effect

pixelate = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle screen shaking

//If the screen is shaking
if (shake == true) {

    //Increment shake_anim variable
    shake_anim++;
    alarm[9] = 2;
    
    //Set the position of the view
    if (shake_anim % 2)
        yport = ((choose(2,4))/* * (window_get_height() / view_hview)*/);
    else
        yport = ((-choose(2,4))/* * (window_get_height() / view_hview)*/);
}
else
    shake_anim = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop screen shake

shake = 0;
if (yport != 0)
    yport = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add lives

//If the player got extra lives
if (givelives &gt; 0) {

    //Play '1UP' sound
    audio_stop_play_sound(snd_1up, 0, false);
    
    //Get life
    lives++;
    
    //Decrement spare
    givelives--;
    
    //Give a life after a 1/2 second
    alarm[7] = 30;
}
else
    alarm[7] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable shockwave

shock_enabled = false;
var_time_var = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay applying settings

//Apply fullscreen
window_set_fullscreen(fullscreen);

//Apply filtering and VSync
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to title

//Disable pixel
with (obj_controller) {

    pixelate = 60;
}

//Go to title
room_goto(rm_title);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset message

message = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate objects
instance_deactivate_all(1);

//Activate 'Mario Start!' text
instance_activate_object(obj_mariostart);

//Activate HUD
instance_activate_object(obj_hud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop fading to black

//Set mode to fade from black
mode = 0;

//Destroy the HUD
with (obj_hud)

    instance_destroy();
    
//Destroy the map HUD
with (obj_hud_map)

    instance_destroy();

//If Mario Start! does not exist
if (!instance_exists(obj_mariostart)) {

    //Begin fading from black
    fade = 0;

    //Activate everything
    instance_activate_all();
}

//Delete the screenshot
if (background_exists(back))
    background_delete(back);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle various in-game variables

//Update Shockwave shader
update_shockwave();

//Increment frames
frame += 0.5;

//Decrement pixelation
pixelate--;

//Prevent lives from going over 999
if (lives &gt; 99)
    lives = 99;

//Prevent score from going over 999.999.990
if (score &gt; 9999990)
    score = 9999990;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gamepad 'Pause' key fix

//Handle 'Start' key press in gamepad
if (input_check_pressed(input.start))
    keyboard_key_press(vk_enter);
else
    keyboard_key_release(vk_enter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hot keys
    
//Restart the game when ALT+R are pressed.
if (keyboard_check_pressed(ord('R'))) {

    //Stop all playing sounds
    audio_stop_all();
    
    //Initialize globals
    init_globals();
    
    //Prevent screen pixelation
    with (obj_controller) {
    
        pixelate = 60;
    }
    
    //Go to the title screen
    room_goto(rm_title);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a shockwave

//Enable shockwave
shock_enabled = true;

//Reset timer
var_time_var = 0;

//Disable shockwave
alarm[6] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed

//If fullscreen is activated
if (fullscreen)
    window_set_fullscreen(fullscreen);

//Otherwise
else {

    //Set windowed mode
    window_set_fullscreen(0);
    
    //Set up filter
    var s = filter+1;
    
    //Reset display
    display_reset(0, vsync);
    
    //Set up the window
    window_set_size(global.gw*s, global.gh*s);
    
    //Set up the display
    display_set_gui_size(global.gw*s, global.gh*s);
    
    //Center the window
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black

//If this event was called manually
if (mode == 0) {

    //Take a screenshot
    back = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], 0, 0);
    
    //Pixel size
    size = 64;

    //Deactivate everything
    instance_deactivate_all(1);
    
}

//Start fading
fade = 0;

//To black
mode = 1;

//Make sure it stops when its done
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fade to black

//Remember last room
last_room = room;

//Fade to black
mode = 1;

//Set the pixel size
size = 0;

//Take a screenshot
back = background_create_from_surface(application_surface, 0, 0, global.gw*2, global.gh*2, 0, 0);

//Set alarm to execute when the next room starts
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set view parameters

//Make view 0 visible if not visible
view_visible[0] = true;

//Enable views if not enabled
view_enabled = true;

//Update wport
view_wport[0] = global.gw;

//Update hport
view_hport[0] = global.gh;

//Update wview
view_wview[0] = global.gw;

//Update hview
view_hview[0] = global.gh; 

//Update hborder
view_hborder[0] = global.gw/2;

//Update vborder
view_vborder[0] = global.gh/2;

//Set up view hor. speed
view_hspeed[0] = -1;

//Set up view ver. speed
view_vspeed[0] = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black, unless you just opened up the game

if (mode = 1)
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Fullscreen + Window size + VSync Settings

//Create the file data
var file = ds_map_create();

//Save fullscreen settings
ds_map_replace(file, "fullscreen", fullscreen);

//Save filtering settings
ds_map_replace(file, "filter", filter);

//Save vsync settings
ds_map_replace(file, "vsync", vsync);

//Save HUD style
ds_map_replace(file, "hud", hud_type);

//Save up key
ds_map_replace(file, "upK", global.key[input.up]);

//Save down key
ds_map_replace(file, "downK", global.key[input.down]);

//Save left key
ds_map_replace(file, "leftK", global.key[input.left]);

//Save right key
ds_map_replace(file, "rightK", global.key[input.right]);

//Save action 1 key
ds_map_replace(file, "action1K", global.key[input.action0]);

//Save action 2 key
ds_map_replace(file, "action2K", global.key[input.action1]);

//Save action 3 key
ds_map_replace(file, "action3K", global.key[input.action2]);

//Save select key
ds_map_replace(file, "selectK", global.key[input.select]);

//Save start key
ds_map_replace(file, "startK", global.key[input.start]);

//Save up button
ds_map_replace(file, "upB", global.button[input.up]);

//Save down button
ds_map_replace(file, "downB", global.button[input.down]);

//Save left button
ds_map_replace(file, "leftB", global.button[input.left]);

//Save right button
ds_map_replace(file, "rightB", global.button[input.right]);

//Save action 1 button
ds_map_replace(file, "action1B", global.button[input.action0]);

//Save action 2 button
ds_map_replace(file, "action2B", global.button[input.action1]);

//Save action 3 button
ds_map_replace(file, "action3B", global.button[input.action2]);

//Save select button
ds_map_replace(file, "selectB", global.button[input.select]);

//Save start button
ds_map_replace(file, "startB", global.button[input.start]);

//Autosave
ds_map_replace(file, "autosave", global.autosave);

//Save the file data
ds_map_secure_save(file, "settings.dat");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Fullscreen + Window size + HUD + VSync Settings

var new_file = false;

//If the 'settings.dat' file exist.
if (file_exists("settings.dat")) {

    //Open the file
    var file = ds_map_secure_load("settings.dat");
    
    if (file == -1) {
    
        new_file = true;
        file_delete("settings.dat");
        
    } else {
    
        //Set fullscreen mode based on the read value
        fullscreen = real(ds_map_find_value(file,"fullscreen"));
    
        //Set filtering mode based on the read value
        filter = real(ds_map_find_value(file,"filter"));
    
        //Set vsync based on the read value
        vsync = real(ds_map_find_value(file,"vsync"));
        
        //Set hud based on the read value
        hud_type = real(ds_map_find_value(file,"hud"));
        
        //Set saved 'Up' Key
        global.key[input.up] = real(ds_map_find_value(file,"upK"));
        
        //Set saved 'Down' key
        global.key[input.down] = real(ds_map_find_value(file,"downK"));
        
        //Set saved 'Left' key
        global.key[input.left] = real(ds_map_find_value(file,"leftK"));
        
        //Set saved 'Right' key
        global.key[input.right] = real(ds_map_find_value(file,"rightK"));
        
        //Set saved 'Action 0' Key (Default: Z)
        global.key[input.action0] = real(ds_map_find_value(file,"action1K"));
        
        //Set saved 'Action 1' Key (Default: X)
        global.key[input.action1] = real(ds_map_find_value(file,"action2K"));

        //Set saved 'Action 2' Key (Default: C)
        global.key[input.action2] = real(ds_map_find_value(file,"action3K"));
        
        //Set saved 'Select' Key (Default: Backspace)
        global.key[input.select] = real(ds_map_find_value(file,"selectK"));
        
        //Set saved 'Start' Button (Default: Enter)
        global.key[input.start] = real(ds_map_find_value(file,"startK"));
        
        //Set saved 'Up' Button
        global.button[input.up] = real(ds_map_find_value(file,"upB"));
        
        //Set saved 'Down' Button
        global.button[input.down] = real(ds_map_find_value(file,"downB"));
        
        //Set saved 'Left' Button
        global.button[input.left] = real(ds_map_find_value(file,"leftB"));
        
        //Set saved 'Right' Button
        global.button[input.right] = real(ds_map_find_value(file,"rightB"));
        
        //Set saved 'Action 0' Button (Default: A)
        global.button[input.action0] = real(ds_map_find_value(file,"action1B"));
        
        //Set saved 'Action 1' Button (Default: X)
        global.button[input.action1] = real(ds_map_find_value(file,"action2B"));
        
        //Set saved 'Action 2' Button (Default: B)
        global.button[input.action2] = real(ds_map_find_value(file,"action3B"));
                
        //Set saved 'Select' Button (Default: Select)
        global.button[input.select] = real(ds_map_find_value(file,"selectB"));
        
        //Set saved 'Start' Button (Default: Start)
        global.button[input.start] = real(ds_map_find_value(file,"startB"));
        
        //Set autosave state (Default: true)
        global.autosave = real(ds_map_find_value(file,"autosave"));
    
        //Close the file
        ds_map_destroy(file);
        
    }
    
} else {

    new_file = true;
    
}

if (new_file) {

    //Fullscreen is off by default
    fullscreen = 0;

    //Set the window to double of it's original size
    filter = 2;

    //VSync is off by default
    vsync = 0;
    
    //Default ketboard configs
    
    //Up key
    global.key[input.up] = vk_up;
    
    //Down key
    global.key[input.down] = vk_down;
    
    //Left key
    global.key[input.left] = vk_left;
    
    //Right key
    global.key[input.right] = vk_right;
    
    //Action 1 (Shift)
    global.key[input.action0] = vk_shift;
    
    //Action 2 (Control)
    global.key[input.action1] = vk_control;
    
    //Action 3 (Space)
    global.key[input.action2] = vk_space;
    
    //Select Key
    global.key[input.select] = vk_backspace;
    
    //Start Key
    global.key[input.start] = vk_enter;
    
    //Default controller configs
    
    //D-Pad Up
    global.button[input.up] = gp_padu;
    
    //D-Pad Down
    global.button[input.down] = gp_padd;
    
    //D-Pad Left
    global.button[input.left] = gp_padl;
    
    //D-Pad Right
    global.button[input.right] = gp_padr;
    
    //Action 1 (A)
    global.button[input.action0] = gp_face1;
    
    //Action 2 (X)
    global.button[input.action1] = gp_face3;
    
    //Action 3 (B)
    global.button[input.action2] = gp_face2;
    
    //Select (Select)
    global.button[input.select] = gp_select;
    
    //Start (Start)
    global.button[input.start] = gp_start;
    
    //Set autosave default to true
    global.autosave = true;
    
}

//Apply loaded settings
alarm[5] = 1;

//Go to title screen
alarm[4] = 200;

//Play 'Coin' sound
audio_stop_play_sound(snd_coin, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, window size, and fading.

//Disable alpha blending
draw_enable_alphablend(0);

//Set the shockwave shader
if (shock_enabled) {

    shader_set(shd_shockwave);
    var_time_var += 0.03;
}

//Set the shader uniforms
shader_set_uniform_f(uni_time, var_time_var);
shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
shader_set_uniform_f(uni_shock_amplitude, var_shock_amplitude);
shader_set_uniform_f(uni_shock_refraction, var_shock_refraction );
shader_set_uniform_f(uni_shock_width, var_shock_width);

//If the screen is fading
if (fade &lt; 1) 
&amp;&amp; (size &gt; 0.75) 
&amp;&amp; (pixelate &lt;= 0) {
    
    shader_set(shd_pixel);
    shader_set_uniform_f(pixel, global.gw, global.gh, size, size);
}

//Draw the application surface
draw_surface_stretched(application_surface, 0, yport, global.gw, global.gh);

//Draw the pre-freeze surface if it exists
if (surface_exists(global.prefreeze))
    draw_surface_stretched(global.prefreeze, 0, yport, global.gw, global.gh);

//Reset the shader
shader_reset();

//Enable alpha blending
draw_enable_alphablend(1);

//Set GUI scale
display_set_gui_maximise(filter+1, filter+1);
display_set_gui_size(global.gw, global.gh);

//Draw the level or map HUD
if (instance_exists(obj_hud)) {

    with (obj_hud) {
    
        if (object_index == obj_hud)
            event_user(obj_controller.hud_type);
        else
            event_user(0);
    }
}

//Reset the font
draw_set_font(global.font);

//Fades the screen to and from black
if (fade &lt; 1) {

    //Increment fading
    fade += 1/30;

    //Fade from black
    if (mode = 0) {
    
        draw_set_alpha(1-fade);
        size -= 0.75;
    }

    //Fade to black
    else {
    
        draw_set_alpha(fade);
        size += 0.75;
    }

    //Draw the fade
    draw_set_colour(c_black)
    draw_rectangle(0, 0, 5000, 5000, 0)
    draw_set_alpha(1)
    draw_set_colour(c_white)
}

//Display FPS
if (showfps) {

    if (fps &lt; 30)
       draw_set_colour(c_red);
    else if (fps &lt; 60)
       draw_set_colour(c_yellow);   
    else
        draw_set_colour(c_lime);
             
     draw_text(2, 2, string(fps) + " FPS");
     
     draw_set_colour(c_white);
}

//Set the font
draw_set_font(global.font);

//Align the font
draw_set_halign(fa_right);

//Display settings message
if (message != "") {

    draw_text(display_get_gui_width() - 2, display_get_gui_height() - 10, string(message));
}

//Re-align the font
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display status message

//Draws the screenshot shown when fading to black
if (background_exists(back)) {

    draw_enable_alphablend(0);
    draw_background_ext(back, view_xview[0], view_yview[0], 1, 1, 0, c_white, 1);
    draw_enable_alphablend(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Close the game

game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
