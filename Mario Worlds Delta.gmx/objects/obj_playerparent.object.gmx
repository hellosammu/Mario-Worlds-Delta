<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_followme</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player's parent object

//Enable / disable gravity.
gravity_enable = true;

//Enable / disable control
control_enable = true;

//Movement variables
grav_s = 0;
hspd_s = 0;
vspd_s = 0;

//Handle player's state.
enum statetype {

    idle,
    walk,
    jump,
    climb
}
state = statetype.idle;
delay = 0;

//Handle player
angle = 0;

//Handle player's facing direction.
//1:   Right
//-1:   Left
xscale = 1;

//Handle the player direction when stuck on a solid.
//1:    Right
//-1:   Left
direct = 1;
direct2 = 0;

//Make the player able to hold items, this also enables a special swimming behaviour.
holding = 0;

//Make the player able or not able to jump.
//0: Can Jump
//1: Jumping, can stop in midair
//2: Jumping, cannot stop in midair
jumping = 0;

//Make the player able to perform a spin-jump.
//0: No spin
//1: Spin
jumpstyle = 0;

//Makes the player able to run faster and fly if he has the cape feather.
run = false;

//Allow player to turn while moving
turnnow = false;

//Manages player movement if sliding
sliding = false;

//Manages player movement if swimming
swimming = false;

//Manages player movement if crouched down
crouch = false;

//Allows the player to fly if there's enough speed
pmeter = 0;
boostme = 0;

//Displays a kicking animation if you just kicked a item or a NPC.
kicking = false;

//Prevents damage on the player
invulnerable = false;

//Checks if the player is stuck on a solid surface
inwall = false;

//Displays a firing frame when shooting a projectile
firing = 0;

//Manage colours in the player object
isflashing = 0;

//Manage combos
hitcombo = 0;

//Check if the player is on a slippery surface
inice = 0;

//Maximum horizontal speed
hspeedmax = 1.5;

//Is the player on a sloped terrain?
slope = 0;

//Makes the player dive when holding an item underwater
dive = 0;

//Makes the player able to fly
fly = 0;
flying = 0;
flystrength = 5;
grav_fly = 0.07;

//Squat Timer
squat_time = 0;
squat_ready = 0;

//Floating Timer
floatnow = 0;
floating = 0;

//Scuttle before jump
prejump_scuttle = -1;

//Net smack
netsmack = 0;

//Cloud riding
oncloud = 0;

//Bonus Game Clear
cleared = 0;
timer = 0;

//Check if stun
stun = 0;
stun_anim = 0;

//Projectile direction when spinning
dir = 1;

//Wall / Ceiling Trigger
l = 0;
r = 0;
t = 0;
b = 0;

//Begin alarms
alarm[3] = 1;
alarm[6] = 1;
alarm[8] = 1;
alarm[11] = 1;

//Palette variables
pal = noone;
numb = 0;

//Call cape draw object
mycape = instance_create(x, y, obj_cape);

//Call bolt lift triggers
instance_create(x, y, obj_boundary_top);
instance_create(x, y, obj_boundary_bottom);

//find slope
if (collision_rectangle(x-2, bbox_bottom-3, x+2, bbox_bottom+vspeed, obj_slopeparent, 1, 0)) {

    //manage slope
    with (obj_slopeparent)    
        slope_calculate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy cape object

if (mycape != noone)
    with (mycape) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create eyecandy when certain conditions meet

//If the player is skidding, crouched or sliding down a slope
if (crouch == true) 
|| (sliding == true) 
|| (sprite_index == player_skid()) {

    //Make sure that the player is moving
    if (state == statetype.walk) {
    
        instance_create(x, bbox_bottom, obj_smoke);
        alarm[11] = 4;
    }
    else
        alarm[11] = 1;
}

//Otherwise, if the player is running at full speed
else if (abs(hspeed) &gt;= hspeed_run_full) {

    //Make sure that the player is moving
    if (state == statetype.walk) {
    
        instance_create(x, bbox_bottom, obj_smoke);
        alarm[11] = 4;
    }
    else
        alarm[11] = 1;
}

//Otherwise
else
    alarm[11] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage player projectiles

//If controls are not disabled and the player is not doing a special movement
if (control_enable == true)
&amp;&amp; (flying == 0)
&amp;&amp; (holding == 0)
&amp;&amp; (kicking == 0)
&amp;&amp; (sliding == 0)
&amp;&amp; (jumpstyle == 0) {

    //If the player is not crouched down
    if (crouch == false) {
    
        //If the player has the fire powerup
        if (global.powerup == cs_pow_fire) {
        
            //If there's less than 2 fireballs in view
            if (instance_number(obj_fireball) &lt; 2) {
            
                firing = 9;
                with (instance_create(x, y, obj_fireball)) {
                
                    //Set the vertical speed
                    vspeed = 3;
                
                    //Set the horizontal speed
                    if (global.player == 2) //If Toad is under control
                        hspeed = 4*other.xscale;
                    else
                        hspeed = 3*other.xscale;                   
                }
            }
        }
        
        //Otherwise, if the player has either the cape or the fire cape
        else if (global.powerup == cs_pow_cape) {
        
            //If the player is spinning, reset spins
            if (instance_exists(obj_spinner)) {
                        
                with (obj_spinner) {
                
                    audio_stop_play_sound(snd_spin, 0, false);
                    spin = 0;
                }
            }
            
            //Otherwise
            else            
                instance_create(x, y, obj_spinner);
        }
        
        //If the player has the fire powerup
        else if (global.powerup == cs_pow_ice) {
        
            //If there's less than 2 fireballs in view
            if (instance_number(obj_iceball) &lt; 2) {
            
                firing = 9;
                with (instance_create(x, y, obj_iceball)) 
                    hspeed = other.hspeed+(1.2*sign(other.xscale));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End kicking animation

kicking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate bubble effect

alarm[8] = 60+random_range(-30, 30)
if (swimming == true)
    instance_create(x, bbox_top, obj_bubble)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable gravity and set default depth

//Enable gravity
gravity_enable = true;

//Set depth
if (depth != -5)
    depth = -5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update palette

if (instance_exists(obj_invincibility)) {
    
    //Increment isflashing and reset it if required
    isflashing++;
    if (isflashing &gt; 3) {
    
        isflashing = 0;
    }
    
    //If the invincibility timer is greater than 2 seconds
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[6] = 1;
    else
        alarm[6] = 4;
}
else {

    isflashing = 0;
    alarm[6] = 1;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the world map

wmap_return();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Throw projectiles when spinning


//If the player is doing a spinjump and it's not riding anything
if (jumpstyle == 1) 
&amp;&amp; (global.mount == 0) {
    
    //Fireball
    if (global.powerup == cs_pow_fire) {
    
        with (instance_create(x, y, obj_fireball)) {
        
            //If Toad is under control
            if (global.player == 2)
                hspeed = 4*sign(other.dir);
            else
                hspeed = 3*sign(other.dir);
        }
    }
    
    //Iceball
    else if (global.powerup == cs_pow_ice) {
    
        with (instance_create(x, y, obj_iceball))
            hspeed = 1.2*sign(other.dir);
    }
    
    //Change the facing direction
    xscale = -xscale;
    dir = -dir;
    
    //Set alarm based on direction
    if (dir == 1)
        alarm[3] = 15;
    else
        alarm[3] = 30;
}

//Otherwise, deny event
else
    alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End turning animation

angle = 0;
turnnow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when invulnerable

if (invulnerable == true) {

    image_alpha = !image_alpha;
    alarm[1] = 1;
}
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End invulnerability

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Logic

//Check if above a slope
slope = player_inslope();

//Decrement netsmack
netsmack--;

//If moving down
if (vspeed &gt;= 0) {

    //Manage position in a slope
    if (collision_rectangle(bbox_left, bbox_bottom-3, bbox_right, bbox_bottom+3, obj_slopeparent, 0, 0)) {
    
        //manage slope
        with (obj_slopeparent) 
            slope_calculate();
    }
    
    //Manage position in a moving slope
    if (collision_rectangle(bbox_left, bbox_bottom-3, bbox_right, bbox_bottom+3, obj_slopeparent_move, 0, 0)) {
    
        //manage slope
        with (obj_slopeparent_move) 
            slope_calculate();
    }
}

//Do 'V-Pose' if clearing bonus level
if (cleared == 1) {

    //Disable controls
    control_enable = false;
    
    //Do not crouch
    crouch = 0;
    
    //Increment timer
    timer += 1000/60;
    
    //End state
    if (timer &gt;= 2677)
    &amp;&amp; (audio_is_playing(snd_bonusend)) {
    
        cleared = 2;
        alarm[4] = 220;
    }
}

else {
    
    //Decrement stun
    if (stun &gt; 0) {
    
        //Decrement
        stun--;
        
        //Disable player controls
        control_enable = false;
    }
    else
        control_enable = true;
}

//Decrement boost
if (boostme &gt; 0) {

    //Decrement
    boostme--;
    
    //Force decrement it when stopped
    if (abs(hspeed) &lt; hspeed_run_full)
        boostme = 0;
}

//Reset flying state
if (flying &gt; 0)
&amp;&amp; (state != statetype.jump) {

    flying = 0;
    if (fly &lt; 0)
        fly = 0;
}

//If gravity is enabled
if (gravity_enable == true) {
    
    //If moving down
    if (vspeed &gt;= 0) {
    
        //Check for a semisolid ground
        var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid, 1, 0);
        
        //IF that ground exists and the player is above it and there's no ghost floor below
        if (semisolid)
        &amp;&amp; (((bbox_bottom &lt; semisolid.yprevious+5) &amp;&amp; (!slope)) || ((slope) &amp;&amp; bbox_bottom &lt;= semisolid.bbox_top))
        &amp;&amp; (!collision_point(x, semisolid.y-1, obj_ghostfloor, 1, 0)) {
        
            //Snap above the platform
            y = semisolid.bbox_top-16;
            
            //Stop vertical movement
            vspeed = 0;
            gravity = 0;
            
            //Reset values
            event_user(15);            
        }
        
        //Check for a semisolid ground
        var ss_moving = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid_moving, 1, 0);
        
        //If that ground exists and the player is above it...
        if (ss_moving)
        &amp;&amp; (((bbox_bottom &lt; ss_moving.yprevious+5) &amp;&amp; (!slope)) || ((slope) &amp;&amp; bbox_bottom &lt;= ss_moving.bbox_top)) {
        
            //Snap above the platform
            y = ss_moving.bbox_top-16;
            
            //Stop vertical movement
            vspeed = 0;
            gravity = 0;
            
            //Reset values
            event_user(15);
        }  
    }
    
    //If the player is not swimming
    if (swimming == 0) {
    
        //If the player is not sliding down a slope
        if (sliding == 0) {
        
            //If the player is not climbing
            if (state != statetype.climb) {
            
                //Perform default player physics
                player_behaviour();
                
                //Increment P-Meter
                player_meter();
            }
            
            //Otherwise, if the player is climbing
            else if (state == statetype.climb) {
            
                //Perform player climb physics
                player_behaviour_climb();
                
                //Stop running
                run = false;
                
                //Decrement P-Meter
                if (pmeter &gt; 0)
                    pmeter--;
            }
        }
        
        //Otherwise, if the player is sliding down a slope
        else if (sliding == true) {
        
            //Perform player slide physics
            player_behaviour_slide();
            
            //Stop running
            run = false;
            
            //Decrement P-Meter
            if (pmeter &gt; 0)
                pmeter--;
        }
    }
    
    //Otherwise, if the player is swimming
    else if (swimming == true) {
    
        //Perform player swim physics
        player_behaviour_swim();
        
        //Stop running
        run = false;
        
        //Decrement P-Meter
        if (pmeter &gt; 0)
            pmeter--;
    }
}

//Collision with conveyor
var conveyor = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom+1, obj_conveyorparent, 0, 0);
if (conveyor)
&amp;&amp; (conveyor.image_speed != 0) {

    //If the conveyor is moving to the right
    if (conveyor.image_speed &gt; 0) {
    
        if (!collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-4, obj_solid, 1, 0))
            x += conveyor.image_speed;
    }
    
    //Otherwise, if the conveyor is moving to the left
    else if (conveyor.image_speed &lt; 0) {
    
        if (!collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-4, obj_solid, 1, 0))
            x += conveyor.image_speed;            
    }
}

//Collision with escalator
var escalator = collision_rectangle(bbox_left, bbox_bottom+4, bbox_right, bbox_bottom+8, obj_escalatorparent, 1, 0);
if (escalator)
&amp;&amp; (escalator.image_speed != 0) {

    //If the player is on the ground and it is not sliding down a slope, make it move.
    if (sliding == false)
    &amp;&amp; (state != statetype.jump) {
    
        //Move horizontally
        x += escalator.add;
        
        //Ensure that the player has correct escalator collision
        if (collision_rectangle(bbox_left, bbox_bottom+4, bbox_right, bbox_bottom+8, escalator.myslope, 1, 0))
        &amp;&amp; (!collision_rectangle(bbox_left, bbox_bottom-4, bbox_right, bbox_bottom-4, escalator.myslope, 1, 0))
            y++;
    }
}

//If moving right and the player bumps a wall to the right
if (hspeed &gt; 0) {

    //Collision with non-moving solid objects
    if (collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-1, obj_solid, 1, 0)) {
        
        //Stop horizontal speed
        hspeed = 0;    
        
        //Prevent the player from getting embed in the wall
        while (collision_rectangle(bbox_right, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
        &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
            x--;
    }
    
    //Collision with moving solid objects
    else if (collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-1, obj_solid_moving, 1, 0)) {
        
        //Stop horizontal speed
        hspeed = 0;    
        
        //Prevent the player from getting embed in the wall
        while (collision_rectangle(bbox_right, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid_moving, 1, 0))
        &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid_moving, 0, 0))
            x--;
            
    }
}

//Otherwise, if moving left and the player bumps a wall to the left
else if (hspeed &lt; 0) {

    //Collision with non-solid moving objects
    if (collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid, 1, 0)) {
        
        //Stop horizontal speed
        hspeed = 0;    
        
        //Prevent the player from getting embed in the wall
        while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
        &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))    
            x++;
    }
    
    //Collision with moving solid object
    else if (collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid_moving, 1, 0)) {
        
        //Stop horizontal speed
        hspeed = 0;    
        
        //Prevent the player from getting embed in the wall
        while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid_moving, 1, 0))
        &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))    
            x++;            
    }
}

//If moving up...
if (vspeed &lt; 0)
&amp;&amp; ((collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0))
|| (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid_moving, 1, 0)) 
|| (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0))) {
        
    //Check if there's a block on the way.
    var block = collision_rectangle(bbox_left, bbox_top-2, bbox_right, bbox_top-1, obj_blockparent, 0, 0);
    
    //If there's a block on the way.
    if (block) {
        
        //If the block has NOT been hit.
        if (block.ready == 0) 
        &amp;&amp; (block.object_index != obj_woodblock) {
    
            //Trigger block events
            with (block) {
            
                //Block is hit
                ready = 1;
                
                //Set vertical speed
                vspeed = -2.25;
                alarm[0] = 4;
                
                //Perform block specific events
                event_user(0);
            }
        }
    }

    //If not flying
    if (flying == 0) {
    
        //Stop vertical speed
        vspeed = 0;
        
        //If the player is not climbing
        if (state != statetype.climb) {
        
            //Stop variable jumping
            jumping = 2;
            
            //Play 'Bump' sound
            if (!audio_is_playing(snd_bump))
                audio_stop_play_sound(snd_bump, 0, false);          
        }
    }
}

//If moving up and the player is flying
if (vspeed &lt; 0)
&amp;&amp; (flying &gt; 0) {

    //Hitbox
    var hbox = 1;
    
    //If there's a solid
    while (collision_rectangle(bbox_left, bbox_top-vspeed, bbox_right, bbox_top-hbox, obj_solid, 1, 0))
    || (collision_rectangle(bbox_left, bbox_top-vspeed, bbox_right, bbox_top-hbox, obj_solid_moving, 1, 0))
    || (collision_rectangle(bbox_left, bbox_top-vspeed, bbox_right, bbox_top-hbox, obj_slopeparent_ceiling, 1, 0))
        y += hbox;
}

//If the player is jumping
if (state == statetype.jump)
    while (collision_rectangle(bbox_left, bbox_top-vspeed, bbox_right, bbox_top-0.9, obj_slopeparent_ceiling, 1, 0))
        y += 0.9;

//If the player is not climbing
if (state != statetype.climb) {

    //If the player is not jumping and the controls are not disabled
    if (control_enable == true)
    &amp;&amp; (sliding == false)
    &amp;&amp; (state != statetype.jump) {
    
        //Makes the player crouch down if 'Down' is held
        if (input_check(input.down)) 
            crouch = true;
        
        //Otherwise, make the player get up
        else if (!input_check(input.down))        
            crouch = false;
    }
    
    //Manage player projectiles if 'Action 2' is pressed and the barrier is deactivated.
    if (input_check_pressed(input.action1))
    &amp;&amp; (instance_number(obj_levelcontrol) &gt; 0)
    &amp;&amp; (obj_levelcontrol.barrier == true)
        alarm[10] = 1;
}

//Otherwise, if the player is climbing
else if (state == statetype.climb) {

    //Disable ducking
    crouch = false;
    
    //Disable spin jump
    jumpstyle = false;
}

//Check for a swimming surface
var water = collision_rectangle(bbox_left, y-1, bbox_right, y, obj_swim, 0, 0);

//If there's a swimming surface
if (water) 
&amp;&amp; (swimming == false) {

    //Halve current horizontal speed
    hspeed = hspeed/2;
    
    //Make the player swim
    swimming = true;
    
    //Disable ducking
    crouch = false;
    
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0) {
    
        vspeed = 0;
        with (instance_create(x, water.y-16, obj_smoke)) {
         
            sprite_index = spr_splash;
            image_speed = 0.3;
        }
    }
}

//Otherwise, if the player had enough swimming and wants to get out of water
else if (!water)
&amp;&amp; (swimming == true) {

    //If there's not a solid above
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //If the player is moving up
        if (vspeed &lt; 0)
        &amp;&amp; (state == statetype.jump) {
        
            //If 'Action 0' is being held
            if (input_check(input.action0)) 
            || (input_check(input.action2)) {
            
                //Play 'Jump' sound
                audio_stop_play_sound(snd_jump, 0, false);
                
                //Stop swimming
                swimming = false;
                
                //Allow variable jump
                jumping = 1;
                
                //Set vertical speed
                vspeed = -jumpstrength;
                
                //Create a splash effect
                with (instance_create(x, y-16, obj_smoke)) {
                
                    sprite_index = spr_splash;
                    image_speed = 0.3;
                }
            }
            
            //Otherwise, stop vertical movement
            else {
            
                //If moving up, stop vertical movement
                if (vspeed &lt; 0)
                    vspeed = 0;
            }
        }
    }
}

//Free the player is he is stuck on a solid.
if (vspeed == 0)
&amp;&amp; (crouch == false) 
&amp;&amp; (mask_index == spr_mask_player_big) {
    
    //If the player gets stuck
    if (inwall == false)
    &amp;&amp; (collision_line(bbox_left, bbox_top+4, bbox_right, bbox_top+4, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_line(bbox_left, bbox_bottom, bbox_right, bbox_bottom, obj_solid, 1, 0)) {
    
        //If the direction was not set, set it up
        if (direct2 == 0) then direct2 = xscale;
        
        //Begin movement
        inwall = true;
        
        //Set the movement direction
        direct = -direct2;
    }
    
    //Otherwise, if the player gets stuck on a wall.
    else if (inwall == true) {
    
        //If the player is not longer stuck, allow movement
        if (!collision_line(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
        || (crouch == true) 
        || (global.powerup == cs_pow_small) {
        
            //End wall movement
            inwall = false;
            
            //Reset movement direction
            direct2 = 0;
        }
        
        //Push the player until it is not stuck
        x += 1*sign(direct);
        
        //If the player collides with a wall while being stuck, reverse direction
        if (collision_rectangle(bbox_left, y+4, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
        || (collision_rectangle(bbox_right, y+4, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
            direct = -direct;
    }
}

//Otherwise, stop pushing
else {

    inwall = false;
}

//Unstuck in case of overlapping a solid completely
if (inwall == false)
&amp;&amp; (state != statetype.jump)
&amp;&amp; (state != statetype.climb) {

    //If facing right
    if (xscale == 1) {
    
        while (collision_point(bbox_right, bbox_top, obj_solid, 1, 0))
        &amp;&amp; (collision_point(bbox_right, bbox_bottom, obj_solid, 1, 0))
            x--;
    }
    
    //Otherwise, if facing left
    else if (xscale == -1) {
    
        while (collision_point(bbox_left, bbox_top, obj_solid, 1, 0))
        &amp;&amp; (collision_point(bbox_left, bbox_bottom, obj_solid, 1, 0))
            x++;
    }
}
        
//If the player is not in contact with water.
if (!collision_rectangle(bbox_left, y, bbox_right, bbox_bottom, obj_swim, 0, 0))
&amp;&amp; (swimming == true)
    swimming = false;

//Prevent the player from going too high on the level
if (y &lt; -96)
    y = -96;
    
//Otherwise, if he is falling.
else {

    //If the player falls into a pit...
    if (bbox_bottom &gt; room_height+32) {
    
        //Kill it
        instance_create(x, y, obj_player_dead);
        instance_destroy();
        exit;
    }
    
    //Otherwise, let's do a special check if the player is not stuck in a solid
    else if ((inwall == false) &amp;&amp; (direct2 == 0)) {
    
        //Check boundaries
        event_user(12);

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values

//Allow the player to jump again
jumping = 0;

//End cape flight
flying = 0;

//End spin jump
jumpstyle = 0;

//End squat jump
if (squat_ready == 2) {

    squat_ready = 0;
    if (squat_time &gt; 0)
        squat_time = 0;
}

//End floating
floatnow = 0;
if (floating &gt; 0)
    floating = 0;

//Reset combos when not sliding down a slope
if (sliding == false) 
&amp;&amp; (hitcombo &gt; 0)
    hitcombo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recover gravity, hspeed and vspeed

gravity = grav_s;
grav_s = 0;
hspeed = hspd_s;
hspd_s = 0;
vspeed = vspd_s;
vspd_s = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop gravity, hspeed and vspeed and save the values

grav_s = gravity;
gravity = 0;
hspd_s = hspeed;
hspeed = 0;
vspd_s = vspeed;
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check boundaries

//Dead yet? Hope not
var dead = false;

//Vertical collisions
var check_t = (collision_rectangle(bbox_left+2,bbox_top-1-abs(vspeed),bbox_right-2,bbox_top+1+abs(vspeed),obj_solid_moving,0,0));
var check_b = (collision_rectangle(bbox_left+2,bbox_bottom-1-abs(vspeed),bbox_right-2,bbox_top+1+abs(vspeed),obj_solid_moving,0,0));

//Slam from the top
if (check_t) {

    //If the top check is lower than it was last frame...
    if (check_t.y &gt; check_t.yprevious)
    || (check_t.hspeed &gt; 0) {
    
        //And you're touching a block below,
        if (collision_rectangle(bbox_left+2,bbox_top-1-abs(vspeed),bbox_right-2,bbox_top+1+abs(vspeed),obj_solid,0,0))
        || (collision_rectangle(bbox_left+2,bbox_top-1-abs(vspeed),bbox_right-2,bbox_top+1+abs(vspeed),obj_solid_moving,0,0)) {
        
            //Die
            dead = true;
        
        }
    
    }
    
}

//Slam from the bottom
if (check_b) {

    //If the top check is lower than it was last frame...
    if (check_b.y &lt; check_b.yprevious)
    || (check_b.vspeed &lt; 0) {
    
        //And you're touching a block below,
        if (collision_rectangle(bbox_left,bbox_bottom-1-abs(vspeed),bbox_right,bbox_bottom+1+abs(vspeed),obj_solid,0,0))
        || (collision_rectangle(bbox_left,bbox_bottom-1-abs(vspeed),bbox_right,bbox_bottom+1+abs(vspeed),obj_solid_moving,0,0)) {
        
            //Die
            dead = true;
        
        }
    
    }
    
}

//Horizontal collisions
var check_l = (collision_rectangle(bbox_left-1-abs(hspeed),bbox_top+4,bbox_left+1+abs(hspeed),bbox_bottom+4,obj_solid_moving,0,0));
var check_r = (collision_rectangle(bbox_right-1-abs(hspeed),bbox_top+4,bbox_right+1+abs(hspeed),bbox_bottom+4,obj_solid_moving,0,0));

//Slam from the left
if (check_l) {

    //If the left check is farther to the right than before...
    if (check_l.x &gt; check_l.xprevious)
    || (check_l.hspeed &gt; 0) {
    
        //And you're touching a block to the right
        if (collision_rectangle(bbox_right-1-abs(hspeed),bbox_top,bbox_right+1+abs(hspeed),bbox_bottom,obj_solid,0,0))
        || (collision_rectangle(bbox_right-1-abs(hspeed),bbox_top,bbox_right+1+abs(hspeed),bbox_bottom,obj_solid_moving,0,0)) {
        
            //Die
            dead = true;
        
        }
    
    }
    
}

//Slam from the right
if (check_r) {

    //If the right check is farther to the left than before...
    if (check_r.x &lt; check_r.xprevious)
    || (check_r.hspeed &lt; 0) {
    
        //And you're touching a block below,
        if (collision_rectangle(bbox_left-1-abs(hspeed),bbox_top,bbox_left+1+abs(hspeed),bbox_top,obj_solid,0,0))
        || (collision_rectangle(bbox_left-1-abs(hspeed),bbox_top,bbox_left+1+abs(hspeed),bbox_top,obj_solid_moving,0,0)) {
        
            //Die
            dead = true;
        
        }
    
    }
    
}

//Kill the player if need be
if (dead) {

    instance_create(x, y, obj_player_dead);
    instance_destroy();
    exit;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the kicking pose

kicking = true;
alarm[9] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hop when stomping a enemy

//Ignore if climbing
if (state == statetype.climb)
exit;

//Set the vertical speed
vspeed = -jumpstrength_bounce;

//Boost jump
y--;

//If 'Action 1' is held
if (input_check(input.action0))
|| (input_check(input.action2))
    jumping = 1;
else
    jumping = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt the player

//If the player is not invulnerable
if (invulnerable == false) {
    
    //If the player is riding a yoshi
    if (global.mount == 1) {
    
        //Play 'Hurt' sound
        audio_stop_play_sound(snd_hurt, 0, false);
    
        //With Yoshi
        with (obj_yoshi) {
        
            //Set 'Runaway' state
            state = yoshistate.runaway;
            
            //Set xscale
            xscale = obj_playerparent.xscale;
            
            //Set horizontal speed
            hspeed = xscale*2;
            
            //Stop licking
            licking = 0;
            anim = 0;
            
            //Disallow ride
            rideme = 0;
            
            //Allow it
            alarm[0] = 16;
        }
        
        //Make the player bounce
        vspeed = -4;
        visible = true;
        
        //Stop holding
        holding = 0;
        
        //Stop dismounting yoshi
        global.mount = 0;
    }
    
    //Otherwise, if the player is not riding a yoshi
    else {
    
        //If the player is flying
        if (instance_exists(obj_cape_fly)) {
        
            //Play 'Cape Cancel' sound
            audio_stop_play_sound(snd_capecancel, 0, false);
            
            //Destroy cape object
            with (obj_cape_fly) instance_destroy();
            
            //Start spin
            jumpstyle = 1;
        }
        
        //Otherwise
        else {
    
            //If the player powerup is greater than mushroom
            if (global.powerup &gt; cs_pow_super) {
            
                //Play 'Powerdown' sound
                audio_stop_play_sound(snd_powerdown, 0, false);
                
                //Perform animation sequence
                _transform = instance_create(0, 0, obj_player_transform);
                    _transform.oldpowerup = global.powerup;
                    _transform.newpowerup = cs_pow_super;    
            }
            
            //Otherwise, if the player is big
            else if (global.powerup == cs_pow_super) {
            
                //Play 'Powerdown' sound
                audio_stop_play_sound(snd_powerdown, 0, false);
                
                //Drop reserve item
                with (obj_levelcontrol) {
                
                    if (global.reserveitem &gt; cs_pow_small)
                        event_user(1);
                }
                
                //Perform animation sequence
                _transform = instance_create(0, 0, obj_player_transform);
                    _transform.oldpowerup = global.powerup;
                    _transform.newpowerup = cs_pow_small;    
            }
            
            //Otherwise, if the player is small
            else if (global.powerup == cs_pow_small) {
            
                instance_create(x, y, obj_player_dead);
                instance_destroy();
                exit;
            }
        }
    }
    
    //Become invulnerable
    invulnerable = true;
    alarm[0] = 90;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute 'Destroy' event

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Increment stun animation
stun_anim += 0.5;

//If the player is about to squat jump
if (squat_ready == 1)
&amp;&amp; (squat_time mod 4 == 0) 
&amp;&amp; (instance_number(obj_invincibility) == 0) {

    //Draw sprite
    draw_sprite_ext(sprite_index, image_index, round(x), round(y)+1, xscale, 1, 0, c_white, image_alpha);     
    
    //Draw blended sprite
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprite_index, image_index, round(x), round(y)+1, xscale, 1, 0, c_white, image_alpha);
    draw_set_blend_mode(bm_normal);      
}

//Otherwise
else {
    
    //Set up palette
    player_set_palette(id);
        
    //Draw the player
    draw_sprite_ext(sprite_index, image_index, round(x), round(y)+1, xscale, 1, angle, c_white, image_alpha);
    
    //Draw stun
    if (stun &gt; 0) {
    
        draw_sprite_ext(spr_shake, stun_anim, x, y, 1, 1, 0, c_white, 1);
    }
    
    //Reset palette
    pal_swap_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
